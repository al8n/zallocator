name: CI

on:
  pull_request:
    branches:
      - main
    # Don't run Clippy tests, when only textfiles were modified
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'
  push:
    branches:
      - main
    # Don't run Clippy tests, when only textfiles were modified
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  nightly: nightly

defaults:
  run:
    shell: bash

jobs:
  # Check formatting
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable
    - name: Check formatting
      run: cargo fmt --all -- --check

  # Apply clippy lints
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Apply clippy lints
      run: cargo clippy

  # Stable
  stable:
    name: stable
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
        run: rustup update stable --no-self-update && rustup default stable
      - name: Test with std
        run: cargo test --features future,tokio,async-std,smol
      - name: Test without std
        run: cargo test --no-default-features --features core

  # Run tests on some extra platforms
  cross:
    name: cross
    strategy:
      matrix:
        target:
          - aarch64-linux-android
          - i686-linux-android
          - x86_64-linux-android
          - i686-pc-windows-gnu
          - x86_64-pc-windows-gnu 
          - wasm32-unknown-unknown
          - i686-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: cross build --target ${{ matrix.target }}
        run: |
          cargo install cross
          cross build --target ${{ matrix.target }}
        if: matrix.target != 'wasm32-unknown-unknown'
      # WASM support
      - name: cargo build --target ${{ matrix.target }}
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --features js --target ${{ matrix.target }}
        if: matrix.target == 'wasm32-unknown-unknown'

  # Sanitizers
  sanitizer:
    name: sanitizer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update $nightly && rustup default $nightly
      - name: Install rust-src
        run: rustup component add rust-src
      - name: ASAN / LSAN / TSAN
        run: . ci/sanitizer.sh

  miri:
    name: miri
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Miri
        run: ci/miri.sh
  
  valgrind:
    name: valgrind
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
      - uses: Swatinem/rust-cache@v1

      - name: Install Valgrind
        run: |
          sudo apt-get update -y
          sudo apt-get install -y valgrind
      # Compile tests
      - name: cargo build test-concurrent-allocator
        run: cargo build
        working-directory: integration

      # Run with valgrind
      - name: Run valgrind test-concurrent-allocator
        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/integration
        working-directory: integration

  coverage:
    name: cargo tarpaulin
    needs: 
      - rustfmt
      - clippy
      - stable
      - cross
      - sanitizer 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v1

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Run cargo tarpaulin
        run: cargo tarpaulin --features tokio,async-std,smol --run-types AllTargets --out xml

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
